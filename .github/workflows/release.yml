name: Build and Release

on:
  push:
    tags: ['v*'] # 只有當推送 tag 時才觸發
  workflow_dispatch: # 手動觸發選項

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Fix line endings (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          git config core.autocrlf false
          git config core.eol lf
          git add .
          git reset --hard

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download ExifTool
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            curl -L https://exiftool.org/exiftool-13.37.zip -o exiftool.zip
            unzip exiftool.zip -d resources/exiftool_dist/
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            curl -L https://exiftool.org/Image-ExifTool-13.37.tar.gz -o exiftool.tar.gz
            tar -xzf exiftool.tar.gz -C resources/exiftool_dist/
            mv resources/exiftool_dist/Image-ExifTool-13.37/* resources/exiftool_dist/
          else
            curl -L https://exiftool.org/Image-ExifTool-13.37.tar.gz -o exiftool.tar.gz
            tar -xzf exiftool.tar.gz -C resources/exiftool_dist/
            mv resources/exiftool_dist/Image-ExifTool-13.37/* resources/exiftool_dist/
          fi

      - name: Build app
        run: pnpm build

      - name: Build executable
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pnpm build:win
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            pnpm build:mac
          else
            pnpm build:linux
          fi

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la dist/
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            test -f dist/*.exe || (echo "Windows executable not found" && exit 1)
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            test -f dist/*.dmg || (echo "macOS DMG not found" && exit 1)
          else
            test -f dist/*.AppImage || (echo "Linux AppImage not found" && exit 1)
          fi
          echo "Build artifacts verified successfully"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Inscribe-${{ matrix.os }}
          path: |
            dist/
            !dist/builder-debug.yml
            !dist/builder-effective-config.yaml
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/Inscribe-windows-latest/*
            artifacts/Inscribe-macos-latest/*
            artifacts/Inscribe-ubuntu-latest/*
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## 🚀 Inscribe ${{ github.ref_name }}

            ### 📦 Downloads
            - **Windows**: `Inscribe-*-setup.exe` - Windows 安裝程式
            - **macOS**: `Inscribe-*.dmg` - macOS 磁碟映像
            - **Linux**: `Inscribe-*.AppImage` - Linux 可執行檔案

            ### ✨ Features
            - 圖片元數據編輯
            - 多平台支援
            - 中文編碼支援

            ### 🔧 Installation
            1. 下載對應平台的安裝檔
            2. 執行安裝程式
            3. 開始使用！
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
